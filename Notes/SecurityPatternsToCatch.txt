Static Patterns to Look For:
============================

1. Untrusted unsanitized data to Runtime.exec() method
-------------------------------------------------------
// Do not pass untrusted unsanitized data to the Runtime.exec() method
Reference page: CERT Java Secure Coding pg. 50

Main Idea:
~~~~~~~~~~
When using Runtime.exec() verify that any paramaters being passed into it are first validated.
If not, someone can name their variable value (e.g. bad directory name) to be a command script

Example from Book:
++++++++++++++++++
Bad: retrieved directory name not validated and appended to executing command string to the
     Runtime.exec() method.
Good: have a pattern match on the directory name to ensure it does end not have strange symbols
    like & and quotes

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Find instances of Runtime (e.g. Runtime rt = Runtime.getRuntime())
- Ensure if there are parameters being fed into rt.exec() they are checked beforehand via
  if statement
- Otherwise ensure that the parameters were selective user choice (as in static strings determined
  by the code via user choice)
- Suggested solutions: Check parameters (via if statement), Build string via switch statement
  Avoid using Runtime.exec()


2. Ignored values returned by some selected methods
----------------------------------------------------
// Do not ignore values returned by some selected methods (Related to evaluation projects)
Reference page: CERT Java Secure Coding pg. 86

Main Idea:
~~~~~~~~~~
If a method returns a boolean or some value to indicate that the method succeeded => have a condition
on it to ensure that the operation did succeed. Don't ignore it!

Example from Book:
++++++++++++++++++
Bad: File.delete() used but if deletion not successful => returns false but method didn't check
Good: Check if File.delete() did succeed. If not, ensure that you have a control flow to handle it

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Look for method calls that are not being stored into a variable
- Method being called does have a return value => warn aboout this!
- Suggested solution: Have variable for the return value and write a condition block on it

Helpful Pointer:
>>>>>>>>>>>>>>>>>
Extend: https://github.com/google/error-prone/blob/master/core/src/main/java/com/google/errorprone/bugpatterns/ReturnValueIgnored.java
Add more values to the hashmap and it should work... (doesn't take into account File Streams right now)


3. NullPointerException Caught
------------------------------------
// Do not catch NullPointerException
Reference page: CERT Secure Java Coding pg. 294

Main Idea:
~~~~~~~~~~
NullPointerException should not be caught as a form of a null check. Instead have equals(NULL)
or == null. You should also not catch the parents of NullPointerException since those are even
more generic. If you catch it, attackers can trigger the "false" edge without having anything.
(Control full Vulnerability)
Other Exceptions to catch: Exception, RuntimeException, Throwable
(basically too generic exceptions...) 

Example from Book:
++++++++++++++++++
Bad: when checking if a string is empty, caught NullPointerException
Good: have string.isEmpty() for control flow.

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Look for Try & Catch blocks
- If in the Catch, Exception being thrown is NullPointerException, Exception, RuntimeException,
  or Throwable.
- Suggested solution: Have generic null or condition check. Otherwise, catch more specific
  Exception


4. Capture the Return Value via Int
----------------------------------------------------------------------------
// Use an int to capture the return value of methods that read a character or byte
Reference page: CERT Secure Java Coding pg. 504

Main Idea:
~~~~~~~~~~
When InputStream or Reader subclass want to read from streams, programmers uses -1 to check end of the stream. 
Because -1 is int type and reading returns byte or char,  it can cause unexpected situation when they are compared. (-1 is truncated to compare)
To check end of stream with -1, it is needed using int to compare then type casting to get the data.


Example from Book:
++++++++++++++++++
Bad:
reading stream as byte and compare with -1
reading stream as char and compare with -1
Good:
reading stream as int and compare with -1
then type cast to byte or char

Overall Pattern:
+-+-+-+-+-+-+-+-+
- After initializing stream, reading from stream with loop.
- For loop terminate condition, checking end of streams with -1.
- type of reading stream should be int
- inside of loop, type cast for data
- Suggested solution: 
	checking InputStream or Reader read.
if yes, checking (read) receiver type as int.

5. Weak Encryption
--------------------------
// Use strong cryptography
Reference material: Jones Secure Coding Article, (a wiki page with current strong encryption techniques?)
https://www.storagecraft.com/blog/5-common-encryption-algorithms/

Main Idea:
~~~~~~~~~~
Encryption should be using Industry Standard strong encryption. You should not be using home-grown encryption.
Approved Strong techniques: Triple DES, RSA, AES, BlowFish, TwoFish

Example from Book:
++++++++++++++++++
Bad:
Good:

Overall Pattern:
+-+-+-+-+-+-+-+-+
- ...
- Suggested solution: 


6. Fail Securely
------------------
Reference page: Jones Secure Coding Article,

Main Idea:
~~~~~~~~~~
When the program crashes, make sure an security loop hole is not introduced. For example, if a connection to the
database was opened, make sure it was closed on fail.

Example from Book:
++++++++++++++++++
Bad: 
  Terminate when the program fails without close resources which are using.
Good:
  Whenever, although the program is needed to be terminated due to failures, currently using resources closed before the program ends.

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Checking which resources are held by program.
- if it has finally block, close all resources.
- or initialize only autoclosable resources.
- Suggested solution: 
	check which resources are hang.
If yes,	check they are needed to be closed.
If yes,	check close methods in finally block.

7. Unsanitized untrusted data across trust boundary
----------------------------------------------------
// Sanitize untrusted data passed across a trust boundary : SQL Injection
Reference Page: CERT Java Secure Coding.pdf pg 24

Main Idea:
~~~~~~~~~~
Where there is a string construction of an SQL script (e.g. Select * from database where "username"...)
check that there was validation of the parameters being given to the string beforehand.
If the passed parameter wasn't valid in the first place, stop it from being used.

Example from Book:
++++++++++++++++++
Bad: Username not checked => someone can put in a malicious script as username
Good: Username checked for length boundary first (stops the super-long malicious script)

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Look for SQL strings being passed & find their parameters.
- Check if parameters were checked beforehand
- Suggested solution: Use PreparedStatement to load basic string first. Then fill in the sanitized
  fields later using setString();


8. Integer Overflow
-------------------
// Integer Overflow
Reference page: CERT Java Secure Coding pg. 106

Main Idea:
~~~~~~~~~~
Ensure that numeric types used are within range. Java will secretly wrap these values which will
result in some pretty strange errors. Primarily the operator takes in 2 numeric types and applies
the operation which may result in overflow.
Operations to check: +, - (sub), *, /, ++, --, +=, -=, *=, /=, -(negation)

Example from Book:
++++++++++++++++++
Bad: int a + int b w/o checking and stuffing it into int c
Good: check if int b smaller than (max value for int - int a) and int b is bigger than (min value
      for int - int a)

Overall Pattern:
+-+-+-+-+-+-+-+-+
- Look for operations where numeric types are involved and one of the operations in list is being used
- Look if there is verification on the integer or if value after operation guaranteed to fit result type
- Otherwise, check if there was upcasting or BigInteger
- Suggested solution: Precondition (check parameters), upcasting (perform operation on a bigger type),
  BigInteger (do operation as BigIntegers such that BigInteger when forced into a smaller bucket than
  needed, it will auto throw an exception)
